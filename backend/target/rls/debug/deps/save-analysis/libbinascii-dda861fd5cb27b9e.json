{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4","program":"C:\\Users\\Qiao\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","binascii","C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"decode\"","--cfg","feature=\"default\"","--cfg","feature=\"encode\"","-C","metadata=dda861fd5cb27b9e","-C","extra-filename=-dda861fd5cb27b9e","--out-dir","g:\\rebornsimulate\\backend\\target\\rls\\debug\\deps","-L","dependency=g:\\rebornsimulate\\backend\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Qiao\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"g:\\rebornsimulate\\backend\\target\\rls\\debug\\deps\\libbinascii-dda861fd5cb27b9e.rmeta"},"prelude":{"crate_id":{"name":"binascii","disambiguator":[2390940747327207607,0]},"crate_root":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src","external_crates":[{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[11670460313399248794,0]}},{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[8277854152057768692,0]}},{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[6312854529260013001,0]}}],"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":0,"byte_end":11425,"line_start":1,"line_end":334,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":0,"byte_end":11425,"line_start":1,"line_end":334,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":19},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":17}],"decl_id":null,"docs":" This crate contains encoders & decoders for various formats (base16, base32 & base64)","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"forbid(unsafe_code)","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":11,"byte_end":34,"line_start":2,"line_end":2,"column_start":1,"column_end":24}},{"value":"/ This crate contains encoders & decoders for various formats (base16, base32 & base64)","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":36,"byte_end":125,"line_start":4,"line_end":4,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":126,"byte_end":129,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Most functions of this crate work the same way.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":130,"byte_end":181,"line_start":6,"line_end":6,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":182,"byte_end":185,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ # Quick Example","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":186,"byte_end":205,"line_start":8,"line_end":8,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":206,"byte_end":213,"line_start":9,"line_end":9,"column_start":1,"column_end":8}},{"value":"/ use binascii::b32decode;","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":214,"byte_end":242,"line_start":10,"line_end":10,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":243,"byte_end":246,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ let mut output_buffer = [0u8; 200];","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":247,"byte_end":286,"line_start":12,"line_end":12,"column_start":1,"column_end":40}},{"value":"/ let message = \"MJUW4YLTMNUWSLLSOMQGS4ZAORUGKIDCMVZXIII=\";","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":287,"byte_end":348,"line_start":13,"line_end":13,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":349,"byte_end":352,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ let result = b32decode(&message.as_bytes(), &mut output_buffer).ok().unwrap();","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":353,"byte_end":435,"line_start":15,"line_end":15,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":436,"byte_end":439,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(result, \"binascii-rs is the best!\".as_bytes());","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":440,"byte_end":502,"line_start":17,"line_end":17,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":503,"byte_end":510,"line_start":18,"line_end":18,"column_start":1,"column_end":8}}]},{"kind":"TupleVariant","id":{"krate":0,"index":20},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":765,"byte_end":783,"line_start":27,"line_end":27,"column_start":5,"column_end":23},"name":"InvalidInputLength","qualname":"::ConvertError::InvalidInputLength","value":"ConvertError::InvalidInputLength","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" This error means that the `input` buffer's length is too short or not right (padding)\n","sig":null,"attributes":[{"value":"/ This error means that the `input` buffer's length is too short or not right (padding)","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":671,"byte_end":760,"line_start":26,"line_end":26,"column_start":5,"column_end":94}}]},{"kind":"TupleVariant","id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":830,"byte_end":849,"line_start":30,"line_end":30,"column_start":5,"column_end":24},"name":"InvalidOutputLength","qualname":"::ConvertError::InvalidOutputLength","value":"ConvertError::InvalidOutputLength","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" The given `output` is too short\n","sig":null,"attributes":[{"value":"/ The given `output` is too short","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":790,"byte_end":825,"line_start":29,"line_end":29,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":24},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":905,"byte_end":917,"line_start":33,"line_end":33,"column_start":5,"column_end":17},"name":"InvalidInput","qualname":"::ConvertError::InvalidInput","value":"ConvertError::InvalidInput","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Failure to decode due to malformed input\n","sig":null,"attributes":[{"value":"/ Failure to decode due to malformed input","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":856,"byte_end":900,"line_start":32,"line_end":32,"column_start":5,"column_end":49}}]},{"kind":"Enum","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":652,"byte_end":664,"line_start":25,"line_end":25,"column_start":10,"column_end":22},"name":"ConvertError","qualname":"::ConvertError","value":"pub enum ConvertError {\n    InvalidInputLength,\n    InvalidOutputLength,\n    InvalidInput,\n}","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24}],"decl_id":null,"docs":" Enum that identifies possible failure in encoding binary or decoding text\n","sig":null,"attributes":[{"value":"/ Enum that identifies possible failure in encoding binary or decoding text","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":537,"byte_end":614,"line_start":23,"line_end":23,"column_start":1,"column_end":78}}]},{"kind":"Function","id":{"krate":0,"index":4},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":1770,"byte_end":1777,"line_start":57,"line_end":57,"column_start":8,"column_end":15},"name":"hex2bin","qualname":"::hex2bin","value":"pub fn hex2bin<'a>(&[u8], &'a mut [u8]) -> Result<&'a mut [u8], ConvertError>","parent":null,"children":[],"decl_id":null,"docs":" **Base16 Decoder** - Converts a hexadecimal string to it's binary form.","sig":null,"attributes":[{"value":"/ **Base16 Decoder** - Converts a hexadecimal string to it's binary form.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":922,"byte_end":997,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":998,"byte_end":1001,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":1002,"byte_end":1015,"line_start":38,"line_end":38,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":1016,"byte_end":1019,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":1020,"byte_end":1027,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/ use binascii::hex2bin;","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":1028,"byte_end":1054,"line_start":41,"line_end":41,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":1055,"byte_end":1058,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ let mut my_output_buffer = [0u8; 200];","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":1059,"byte_end":1101,"line_start":43,"line_end":43,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":1102,"byte_end":1105,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ // If `hex2bin` succeedes, the result will be a `slice` of `my_output_buffer` containing the decoded data.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":1106,"byte_end":1216,"line_start":45,"line_end":45,"column_start":1,"column_end":111}},{"value":"/ let res = hex2bin(\"48656C6C6F2C20576F726C6421\".as_bytes(), &mut my_output_buffer);","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":1217,"byte_end":1303,"line_start":46,"line_end":46,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":1304,"byte_end":1307,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(res.ok().unwrap(), \"Hello, World!\".as_bytes());","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":1308,"byte_end":1370,"line_start":48,"line_end":48,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":1371,"byte_end":1378,"line_start":49,"line_end":49,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":1379,"byte_end":1382,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":1383,"byte_end":1397,"line_start":51,"line_end":51,"column_start":1,"column_end":15}},{"value":"/ This function will fail with:","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":1398,"byte_end":1431,"line_start":52,"line_end":52,"column_start":1,"column_end":34}},{"value":"/ - `ConvertError::InvalidInputLength` - If the `input` slice's length is an odd number.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":1432,"byte_end":1522,"line_start":53,"line_end":53,"column_start":1,"column_end":91}},{"value":"/ - `ConvertError::InvalidOutputLength` - If the `output`'s length isn't at least half of `input`'s length.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":1523,"byte_end":1632,"line_start":54,"line_end":54,"column_start":1,"column_end":110}},{"value":"/ - `ConvertError::InvalidInput` - If the `input` contains characters that are not valid hex digits.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":1633,"byte_end":1735,"line_start":55,"line_end":55,"column_start":1,"column_end":103}},{"value":"cfg(feature = \"decode\")","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":1736,"byte_end":1762,"line_start":56,"line_end":56,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":6},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":3064,"byte_end":3071,"line_start":101,"line_end":101,"column_start":8,"column_end":15},"name":"bin2hex","qualname":"::bin2hex","value":"pub fn bin2hex<'a>(&[u8], &'a mut [u8]) -> Result<&'a mut [u8], ConvertError>","parent":null,"children":[],"decl_id":null,"docs":" **Base16 Encoder** - Converts binary to base16 (hex)","sig":null,"attributes":[{"value":"/ **Base16 Encoder** - Converts binary to base16 (hex)","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":2580,"byte_end":2636,"line_start":85,"line_end":85,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":2637,"byte_end":2640,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":2641,"byte_end":2654,"line_start":87,"line_end":87,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":2655,"byte_end":2658,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":2659,"byte_end":2666,"line_start":89,"line_end":89,"column_start":1,"column_end":8}},{"value":"/ use binascii::bin2hex;","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":2667,"byte_end":2693,"line_start":90,"line_end":90,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":2694,"byte_end":2697,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ let mut buffer = [0u8; 200];","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":2698,"byte_end":2730,"line_start":92,"line_end":92,"column_start":1,"column_end":33}},{"value":"/ let input = \"Hello, World!\";","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":2731,"byte_end":2763,"line_start":93,"line_end":93,"column_start":1,"column_end":33}},{"value":"/ println!(\"hex({}) = {:?}\", input, bin2hex(input.as_bytes(), &mut buffer).ok().unwrap());","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":2764,"byte_end":2856,"line_start":94,"line_end":94,"column_start":1,"column_end":93}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":2857,"byte_end":2864,"line_start":95,"line_end":95,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":2865,"byte_end":2868,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":2869,"byte_end":2883,"line_start":97,"line_end":97,"column_start":1,"column_end":15}},{"value":"/ This function will fail with:","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":2884,"byte_end":2917,"line_start":98,"line_end":98,"column_start":1,"column_end":34}},{"value":"/ - `ConvertError::InvalidOutputLength` - If the `output`'s length isn't at least 2 times the `input` length.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":2918,"byte_end":3029,"line_start":99,"line_end":99,"column_start":1,"column_end":112}},{"value":"cfg(feature = \"encode\")","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":3030,"byte_end":3056,"line_start":100,"line_end":100,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":9},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":3891,"byte_end":3900,"line_start":124,"line_end":124,"column_start":8,"column_end":17},"name":"b32encode","qualname":"::b32encode","value":"pub fn b32encode<'a>(&[u8], &'a mut [u8])\n-> Result<&'a mut [u8], ConvertError>","parent":null,"children":[],"decl_id":null,"docs":" **Base32 Encoder** - Convert arbitrary data to a base32 string","sig":null,"attributes":[{"value":"/ **Base32 Encoder** - Convert arbitrary data to a base32 string","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":3643,"byte_end":3709,"line_start":119,"line_end":119,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":3710,"byte_end":3713,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":3714,"byte_end":3728,"line_start":121,"line_end":121,"column_start":1,"column_end":15}},{"value":"/ This function will fail with `Err(ConvertError::InvalidOutputLength)` if `output`'s length isn't least `input.len()` * 8/5.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":3729,"byte_end":3856,"line_start":122,"line_end":122,"column_start":1,"column_end":128}},{"value":"cfg(feature = \"encode\")","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":3857,"byte_end":3883,"line_start":123,"line_end":123,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":12},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":5511,"byte_end":5520,"line_start":172,"line_end":172,"column_start":8,"column_end":17},"name":"b32decode","qualname":"::b32decode","value":"pub fn b32decode<'a>(&[u8], &'a mut [u8])\n-> Result<&'a mut [u8], ConvertError>","parent":null,"children":[],"decl_id":null,"docs":" **Base32 Decoder** - Converts a base32 encoded string to it's raw form","sig":null,"attributes":[{"value":"/ **Base32 Decoder** - Converts a base32 encoded string to it's raw form","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":5175,"byte_end":5249,"line_start":165,"line_end":165,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":5250,"byte_end":5253,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":5254,"byte_end":5268,"line_start":167,"line_end":167,"column_start":1,"column_end":15}},{"value":"/ This method will fail with:","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":5269,"byte_end":5300,"line_start":168,"line_end":168,"column_start":1,"column_end":32}},{"value":"/ - `ConvertError::InvalidOutputLength` if `output`'s length isn't at least `input.len()` * 5/8.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":5301,"byte_end":5399,"line_start":169,"line_end":169,"column_start":1,"column_end":99}},{"value":"/ - `ConvertError::InvalidInput` if the input contains invalid characters.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":5400,"byte_end":5476,"line_start":170,"line_end":170,"column_start":1,"column_end":77}},{"value":"cfg(feature = \"decode\")","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":5477,"byte_end":5503,"line_start":171,"line_end":171,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":7359,"byte_end":7368,"line_start":226,"line_end":226,"column_start":8,"column_end":17},"name":"b64encode","qualname":"::b64encode","value":"pub fn b64encode<'a>(&[u8], &'a mut [u8])\n-> Result<&'a mut [u8], ConvertError>","parent":null,"children":[],"decl_id":null,"docs":" **Base64 Encoder** - Converts data to a base64 encoded string.","sig":null,"attributes":[{"value":"/ **Base64 Encoder** - Converts data to a base64 encoded string.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":7110,"byte_end":7176,"line_start":221,"line_end":221,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":7177,"byte_end":7180,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":7181,"byte_end":7195,"line_start":223,"line_end":223,"column_start":1,"column_end":15}},{"value":"/ This function will return `Err(ConvertError::InvalidOutputLength)` if `output`'s length isn't at least `input.len()` * 4 /3.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":7196,"byte_end":7324,"line_start":224,"line_end":224,"column_start":1,"column_end":129}},{"value":"cfg(feature = \"encode\")","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":7325,"byte_end":7351,"line_start":225,"line_end":225,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":17},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":9284,"byte_end":9293,"line_start":277,"line_end":277,"column_start":8,"column_end":17},"name":"b64decode","qualname":"::b64decode","value":"pub fn b64decode<'a>(&[u8], &'a mut [u8])\n-> Result<&'a mut [u8], ConvertError>","parent":null,"children":[],"decl_id":null,"docs":" **Base64 Decoder** - Converts a base64 encoded string to it's binary form.","sig":null,"attributes":[{"value":"/ **Base64 Decoder** - Converts a base64 encoded string to it's binary form.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":8823,"byte_end":8901,"line_start":269,"line_end":269,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":8902,"byte_end":8905,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ # Failures","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":8906,"byte_end":8920,"line_start":271,"line_end":271,"column_start":1,"column_end":15}},{"value":"/ This function will fail with:","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":8921,"byte_end":8954,"line_start":272,"line_end":272,"column_start":1,"column_end":34}},{"value":"/ - `ConvertError::InvalidInputLength` - If the input length isn't divisable by 4 (bad padding)","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":8955,"byte_end":9052,"line_start":273,"line_end":273,"column_start":1,"column_end":98}},{"value":"/ - `ConvertError::InvalidOutputLength` - If `output`'s length isn't at least 3/4s of `input`'s length","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":9053,"byte_end":9157,"line_start":274,"line_end":274,"column_start":1,"column_end":105}},{"value":"/ - `ConvertError::InvalidInput` - If an invalid character was encountered while decoding","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":9158,"byte_end":9249,"line_start":275,"line_end":275,"column_start":1,"column_end":92}},{"value":"cfg(feature = \"decode\")","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\binascii-0.1.4\\src\\lib.rs","byte_start":9250,"byte_end":9276,"line_start":276,"line_end":276,"column_start":1,"column_end":27}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}