{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1","program":"C:\\Users\\Qiao\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","atomic","--edition=2018","C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"fallback\"","-C","metadata=875141240c70d91e","-C","extra-filename=-875141240c70d91e","--out-dir","g:\\rebornsimulate\\backend\\target\\rls\\debug\\deps","-L","dependency=g:\\rebornsimulate\\backend\\target\\rls\\debug\\deps","--cap-lints","allow","--cfg","has_atomic_u8","--cfg","has_atomic_i8","--cfg","has_atomic_u16","--cfg","has_atomic_i16","--cfg","has_atomic_u32","--cfg","has_atomic_i32","--cfg","has_atomic_u64","--cfg","has_atomic_i64","--cfg","has_atomic_u8","--cfg","has_atomic_i8","--cfg","has_atomic_u16","--cfg","has_atomic_i16","--cfg","has_atomic_u32","--cfg","has_atomic_i32","--cfg","has_atomic_u64","--cfg","has_atomic_i64","--error-format=json","--sysroot","C:\\Users\\Qiao\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"g:\\rebornsimulate\\backend\\target\\rls\\debug\\deps\\libatomic-875141240c70d91e.rmeta"},"prelude":{"crate_id":{"name":"atomic","disambiguator":[11657134746892818829,0]},"crate_root":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src","external_crates":[{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[11670460313399248794,0]}},{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[8277854152057768692,0]}},{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[6312854529260013001,0]}}],"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":333,"byte_end":26662,"line_start":8,"line_end":711,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":8598},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":1652,"byte_end":1657,"line_start":42,"line_end":42,"column_start":30,"column_end":35},"alias_span":null,"name":"fence","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":1,"index":40451},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":1659,"byte_end":1667,"line_start":42,"line_end":42,"column_start":37,"column_end":45},"alias_span":null,"name":"Ordering","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":333,"byte_end":26662,"line_start":8,"line_end":711,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":84},{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":146},{"krate":0,"index":149},{"krate":0,"index":153},{"krate":0,"index":164},{"krate":0,"index":245},{"krate":0,"index":251},{"krate":0,"index":257},{"krate":0,"index":263},{"krate":0,"index":269},{"krate":0,"index":275},{"krate":0,"index":227},{"krate":0,"index":230},{"krate":0,"index":233},{"krate":0,"index":236},{"krate":0,"index":239},{"krate":0,"index":242},{"krate":0,"index":299},{"krate":0,"index":305},{"krate":0,"index":311},{"krate":0,"index":317},{"krate":0,"index":323},{"krate":0,"index":329},{"krate":0,"index":281},{"krate":0,"index":284},{"krate":0,"index":287},{"krate":0,"index":290},{"krate":0,"index":293},{"krate":0,"index":296}],"decl_id":null,"docs":" Generic `Atomic<T>` wrapper type","sig":null,"attributes":[{"value":"/ Generic `Atomic<T>` wrapper type","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":333,"byte_end":369,"line_start":8,"line_end":8,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":370,"byte_end":373,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Atomic types provide primitive shared-memory communication between","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":374,"byte_end":444,"line_start":10,"line_end":10,"column_start":1,"column_end":71}},{"value":"/ threads, and are the building blocks of other concurrent types.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":445,"byte_end":512,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":513,"byte_end":516,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This library defines a generic atomic wrapper type `Atomic<T>` for all","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":517,"byte_end":591,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/ `T: Copy` types.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":592,"byte_end":612,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"/ Atomic types present operations that, when used correctly, synchronize","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":613,"byte_end":687,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ updates between threads.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":688,"byte_end":716,"line_start":16,"line_end":16,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":717,"byte_end":720,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Each method takes an `Ordering` which represents the strength of","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":721,"byte_end":789,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/ the memory barrier for that operation. These orderings are the","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":790,"byte_end":856,"line_start":19,"line_end":19,"column_start":1,"column_end":67}},{"value":"/ same as [LLVM atomic orderings][1].","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":857,"byte_end":896,"line_start":20,"line_end":20,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":897,"byte_end":900,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ [1]: http://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":901,"byte_end":982,"line_start":22,"line_end":22,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":983,"byte_end":986,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Atomic variables are safe to share between threads (they implement `Sync`)","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":987,"byte_end":1065,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ but they do not themselves provide the mechanism for sharing. The most","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":1066,"byte_end":1140,"line_start":25,"line_end":25,"column_start":1,"column_end":75}},{"value":"/ common way to share an atomic variable is to put it into an `Arc` (an","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":1141,"byte_end":1214,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"/ atomically-reference-counted shared pointer).","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":1215,"byte_end":1264,"line_start":27,"line_end":27,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":1265,"byte_end":1268,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Most atomic types may be stored in static variables, initialized using","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":1269,"byte_end":1343,"line_start":29,"line_end":29,"column_start":1,"column_end":75}},{"value":"/ the `const fn` constructors. Atomic statics are often used for lazy global","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":1344,"byte_end":1422,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ initialization.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":1423,"byte_end":1442,"line_start":31,"line_end":31,"column_start":1,"column_end":20}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":1444,"byte_end":1466,"line_start":33,"line_end":33,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":1467,"byte_end":1493,"line_start":34,"line_end":34,"column_start":1,"column_end":27}},{"value":"no_std","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":1494,"byte_end":1504,"line_start":35,"line_end":35,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":138},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":1954,"byte_end":1960,"line_start":57,"line_end":57,"column_start":12,"column_end":18},"name":"Atomic","qualname":"::Atomic","value":"Atomic {  }","parent":null,"children":[{"krate":0,"index":140}],"decl_id":null,"docs":" A generic atomic wrapper type which allows an object to be safely shared\n between threads.\n","sig":null,"attributes":[{"value":"/ A generic atomic wrapper type which allows an object to be safely shared","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":1824,"byte_end":1900,"line_start":54,"line_end":54,"column_start":1,"column_end":77}},{"value":"/ between threads.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":1901,"byte_end":1921,"line_start":55,"line_end":55,"column_start":1,"column_end":21}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":1922,"byte_end":1942,"line_start":56,"line_end":56,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":2952,"byte_end":2955,"line_start":91,"line_end":91,"column_start":18,"column_end":21},"name":"new","qualname":"<Atomic<T>>::new","value":"pub const fn new(T) -> Atomic<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Atomic`.\n","sig":null,"attributes":[{"value":"/ Creates a new `Atomic`.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":2893,"byte_end":2920,"line_start":89,"line_end":89,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":2925,"byte_end":2934,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":3348,"byte_end":3360,"line_start":103,"line_end":103,"column_start":18,"column_end":30},"name":"is_lock_free","qualname":"<Atomic<T>>::is_lock_free","value":"pub const fn is_lock_free() -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if `Atomic` objects of this type are lock-free.","sig":null,"attributes":[{"value":"/ Checks if `Atomic` objects of this type are lock-free.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":3050,"byte_end":3108,"line_start":97,"line_end":97,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":3113,"byte_end":3116,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ If an `Atomic` is not lock-free then it may be implemented using locks","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":3121,"byte_end":3195,"line_start":99,"line_end":99,"column_start":5,"column_end":79}},{"value":"/ internally, which makes it unsuitable for some situations (such as","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":3200,"byte_end":3270,"line_start":100,"line_end":100,"column_start":5,"column_end":75}},{"value":"/ communicating with a signal handler).","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":3275,"byte_end":3316,"line_start":101,"line_end":101,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":3321,"byte_end":3330,"line_start":102,"line_end":102,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":3677,"byte_end":3684,"line_start":114,"line_end":114,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Atomic<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying type.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying type.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":3452,"byte_end":3507,"line_start":109,"line_end":109,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":3512,"byte_end":3515,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ This is safe because the mutable reference guarantees that no other threads are","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":3520,"byte_end":3603,"line_start":111,"line_end":111,"column_start":5,"column_end":88}},{"value":"/ concurrently accessing the atomic data.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":3608,"byte_end":3651,"line_start":112,"line_end":112,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":3656,"byte_end":3665,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":3985,"byte_end":3995,"line_start":123,"line_end":123,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Atomic<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes the atomic and returns the contained value.","sig":null,"attributes":[{"value":"/ Consumes the atomic and returns the contained value.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":3757,"byte_end":3813,"line_start":118,"line_end":118,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":3818,"byte_end":3821,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ This is safe because passing `self` by value guarantees that no other threads are","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":3826,"byte_end":3911,"line_start":120,"line_end":120,"column_start":5,"column_end":90}},{"value":"/ concurrently accessing the atomic data.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":3916,"byte_end":3959,"line_start":121,"line_end":121,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":3964,"byte_end":3973,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4310,"byte_end":4314,"line_start":136,"line_end":136,"column_start":12,"column_end":16},"name":"load","qualname":"<Atomic<T>>::load","value":"pub fn load(&Self, Ordering) -> T","parent":null,"children":[],"decl_id":null,"docs":" Loads a value from the `Atomic`.","sig":null,"attributes":[{"value":"/ Loads a value from the `Atomic`.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4048,"byte_end":4084,"line_start":127,"line_end":127,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4089,"byte_end":4092,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ `load` takes an `Ordering` argument which describes the memory ordering","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4097,"byte_end":4172,"line_start":129,"line_end":129,"column_start":5,"column_end":80}},{"value":"/ of this operation.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4177,"byte_end":4199,"line_start":130,"line_end":130,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4204,"byte_end":4207,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4212,"byte_end":4224,"line_start":132,"line_end":132,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4229,"byte_end":4232,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ Panics if `order` is `Release` or `AcqRel`.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4237,"byte_end":4284,"line_start":134,"line_end":134,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4289,"byte_end":4298,"line_start":135,"line_end":135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4678,"byte_end":4683,"line_start":149,"line_end":149,"column_start":12,"column_end":17},"name":"store","qualname":"<Atomic<T>>::store","value":"pub fn store(&Self, T, Ordering)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value into the `Atomic`.","sig":null,"attributes":[{"value":"/ Stores a value into the `Atomic`.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4414,"byte_end":4451,"line_start":140,"line_end":140,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4456,"byte_end":4459,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ `store` takes an `Ordering` argument which describes the memory ordering","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4464,"byte_end":4540,"line_start":142,"line_end":142,"column_start":5,"column_end":81}},{"value":"/ of this operation.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4545,"byte_end":4567,"line_start":143,"line_end":143,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4572,"byte_end":4575,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4580,"byte_end":4592,"line_start":145,"line_end":145,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4597,"byte_end":4600,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ Panics if `order` is `Acquire` or `AcqRel`.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4605,"byte_end":4652,"line_start":147,"line_end":147,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4657,"byte_end":4666,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":5016,"byte_end":5020,"line_start":160,"line_end":160,"column_start":12,"column_end":16},"name":"swap","qualname":"<Atomic<T>>::swap","value":"pub fn swap(&Self, T, Ordering) -> T","parent":null,"children":[],"decl_id":null,"docs":" Stores a value into the `Atomic`, returning the old value.","sig":null,"attributes":[{"value":"/ Stores a value into the `Atomic`, returning the old value.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4813,"byte_end":4875,"line_start":155,"line_end":155,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4880,"byte_end":4883,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ `swap` takes an `Ordering` argument which describes the memory ordering","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4888,"byte_end":4963,"line_start":157,"line_end":157,"column_start":5,"column_end":80}},{"value":"/ of this operation.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4968,"byte_end":4990,"line_start":158,"line_end":158,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":4995,"byte_end":5004,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":5863,"byte_end":5879,"line_start":177,"line_end":177,"column_start":12,"column_end":28},"name":"compare_exchange","qualname":"<Atomic<T>>::compare_exchange","value":"pub fn compare_exchange(&Self, T, T, Ordering, Ordering) -> Result<T, T>","parent":null,"children":[],"decl_id":null,"docs":" Stores a value into the `Atomic` if the current value is the same as the\n `current` value.","sig":null,"attributes":[{"value":"/ Stores a value into the `Atomic` if the current value is the same as the","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":5133,"byte_end":5209,"line_start":164,"line_end":164,"column_start":5,"column_end":81}},{"value":"/ `current` value.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":5214,"byte_end":5234,"line_start":165,"line_end":165,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":5239,"byte_end":5242,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ The return value is a result indicating whether the new value was","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":5247,"byte_end":5316,"line_start":167,"line_end":167,"column_start":5,"column_end":74}},{"value":"/ written and containing the previous value. On success this value is","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":5321,"byte_end":5392,"line_start":168,"line_end":168,"column_start":5,"column_end":76}},{"value":"/ guaranteed to be equal to `new`.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":5397,"byte_end":5433,"line_start":169,"line_end":169,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":5438,"byte_end":5441,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ `compare_exchange` takes two `Ordering` arguments to describe the memory","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":5446,"byte_end":5522,"line_start":171,"line_end":171,"column_start":5,"column_end":81}},{"value":"/ ordering of this operation. The first describes the required ordering if","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":5527,"byte_end":5603,"line_start":172,"line_end":172,"column_start":5,"column_end":81}},{"value":"/ the operation succeeds while the second describes the required ordering","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":5608,"byte_end":5683,"line_start":173,"line_end":173,"column_start":5,"column_end":80}},{"value":"/ when the operation fails. The failure ordering can't be `Release` or","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":5688,"byte_end":5760,"line_start":174,"line_end":174,"column_start":5,"column_end":77}},{"value":"/ `AcqRel` and must be equivalent or weaker than the success ordering.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":5765,"byte_end":5837,"line_start":175,"line_end":175,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":5842,"byte_end":5851,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":6986,"byte_end":7007,"line_start":202,"line_end":202,"column_start":12,"column_end":33},"name":"compare_exchange_weak","qualname":"<Atomic<T>>::compare_exchange_weak","value":"pub fn compare_exchange_weak(&Self, T, T, Ordering, Ordering) -> Result<T, T>","parent":null,"children":[],"decl_id":null,"docs":" Stores a value into the `Atomic` if the current value is the same as the\n `current` value.","sig":null,"attributes":[{"value":"/ Stores a value into the `Atomic` if the current value is the same as the","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":6115,"byte_end":6191,"line_start":187,"line_end":187,"column_start":5,"column_end":81}},{"value":"/ `current` value.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":6196,"byte_end":6216,"line_start":188,"line_end":188,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":6221,"byte_end":6224,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ Unlike `compare_exchange`, this function is allowed to spuriously fail","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":6229,"byte_end":6303,"line_start":190,"line_end":190,"column_start":5,"column_end":79}},{"value":"/ even when the comparison succeeds, which can result in more efficient","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":6308,"byte_end":6381,"line_start":191,"line_end":191,"column_start":5,"column_end":78}},{"value":"/ code on some platforms. The return value is a result indicating whether","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":6386,"byte_end":6461,"line_start":192,"line_end":192,"column_start":5,"column_end":80}},{"value":"/ the new value was written and containing the previous value.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":6466,"byte_end":6530,"line_start":193,"line_end":193,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":6535,"byte_end":6538,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ `compare_exchange` takes two `Ordering` arguments to describe the memory","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":6543,"byte_end":6619,"line_start":195,"line_end":195,"column_start":5,"column_end":81}},{"value":"/ ordering of this operation. The first describes the required ordering if","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":6624,"byte_end":6700,"line_start":196,"line_end":196,"column_start":5,"column_end":81}},{"value":"/ the operation succeeds while the second describes the required ordering","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":6705,"byte_end":6780,"line_start":197,"line_end":197,"column_start":5,"column_end":80}},{"value":"/ when the operation fails. The failure ordering can't be `Release` or","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":6785,"byte_end":6857,"line_start":198,"line_end":198,"column_start":5,"column_end":77}},{"value":"/ `AcqRel` and must be equivalent or weaker than the success ordering.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":6862,"byte_end":6934,"line_start":199,"line_end":199,"column_start":5,"column_end":77}},{"value":"/ success ordering.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":6939,"byte_end":6960,"line_start":200,"line_end":200,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":6965,"byte_end":6974,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":9255,"byte_end":9267,"line_start":249,"line_end":249,"column_start":12,"column_end":24},"name":"fetch_update","qualname":"<Atomic<T>>::fetch_update","value":"pub fn fetch_update<F>(&Self, Ordering, Ordering, F) -> Result<T, T> where\nF: FnMut(T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Fetches the value, and applies a function to it that returns an optional\n new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else\n `Err(previous_value)`.","sig":null,"attributes":[{"value":"/ Fetches the value, and applies a function to it that returns an optional","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":7248,"byte_end":7324,"line_start":212,"line_end":212,"column_start":5,"column_end":81}},{"value":"/ new value. Returns a `Result` of `Ok(previous_value)` if the function returned `Some(_)`, else","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":7329,"byte_end":7427,"line_start":213,"line_end":213,"column_start":5,"column_end":103}},{"value":"/ `Err(previous_value)`.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":7432,"byte_end":7458,"line_start":214,"line_end":214,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":7463,"byte_end":7466,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Note: This may call the function multiple times if the value has been changed from other threads in","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":7471,"byte_end":7574,"line_start":216,"line_end":216,"column_start":5,"column_end":108}},{"value":"/ the meantime, as long as the function returns `Some(_)`, but the function will have been applied","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":7579,"byte_end":7679,"line_start":217,"line_end":217,"column_start":5,"column_end":105}},{"value":"/ only once to the stored value.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":7684,"byte_end":7718,"line_start":218,"line_end":218,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":7723,"byte_end":7726,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ `fetch_update` takes two [`Ordering`] arguments to describe the memory ordering of this operation.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":7731,"byte_end":7833,"line_start":220,"line_end":220,"column_start":5,"column_end":107}},{"value":"/ The first describes the required ordering for when the operation finally succeeds while the second","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":7838,"byte_end":7940,"line_start":221,"line_end":221,"column_start":5,"column_end":107}},{"value":"/ describes the required ordering for loads. These correspond to the success and failure orderings of","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":7945,"byte_end":8048,"line_start":222,"line_end":222,"column_start":5,"column_end":108}},{"value":"/ [`compare_exchange`] respectively.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":8053,"byte_end":8091,"line_start":223,"line_end":223,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":8096,"byte_end":8099,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ Using [`Acquire`] as success ordering makes the store part","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":8104,"byte_end":8166,"line_start":225,"line_end":225,"column_start":5,"column_end":67}},{"value":"/ of this operation [`Relaxed`], and using [`Release`] makes the final successful load","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":8171,"byte_end":8259,"line_start":226,"line_end":226,"column_start":5,"column_end":93}},{"value":"/ [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":8264,"byte_end":8358,"line_start":227,"line_end":227,"column_start":5,"column_end":99}},{"value":"/ and must be equivalent to or weaker than the success ordering.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":8363,"byte_end":8429,"line_start":228,"line_end":228,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":8434,"byte_end":8437,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ [`compare_exchange`]: #method.compare_exchange","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":8442,"byte_end":8492,"line_start":230,"line_end":230,"column_start":5,"column_end":55}},{"value":"/ [`Ordering`]: enum.Ordering.html","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":8497,"byte_end":8533,"line_start":231,"line_end":231,"column_start":5,"column_end":41}},{"value":"/ [`Relaxed`]: enum.Ordering.html#variant.Relaxed","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":8538,"byte_end":8589,"line_start":232,"line_end":232,"column_start":5,"column_end":56}},{"value":"/ [`Release`]: enum.Ordering.html#variant.Release","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":8594,"byte_end":8645,"line_start":233,"line_end":233,"column_start":5,"column_end":56}},{"value":"/ [`Acquire`]: enum.Ordering.html#variant.Acquire","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":8650,"byte_end":8701,"line_start":234,"line_end":234,"column_start":5,"column_end":56}},{"value":"/ [`SeqCst`]: enum.Ordering.html#variant.SeqCst","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":8706,"byte_end":8755,"line_start":235,"line_end":235,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":8760,"byte_end":8763,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":8768,"byte_end":8782,"line_start":237,"line_end":237,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":8787,"byte_end":8790,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":8795,"byte_end":8806,"line_start":239,"line_end":239,"column_start":5,"column_end":16}},{"value":"/ use atomic::{Atomic, Ordering};","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":8811,"byte_end":8846,"line_start":240,"line_end":240,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":8851,"byte_end":8854,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ let x = Atomic::new(7);","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":8859,"byte_end":8886,"line_start":242,"line_end":242,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |_| None), Err(7));","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":8891,"byte_end":8976,"line_start":243,"line_end":243,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(7));","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":8981,"byte_end":9072,"line_start":244,"line_end":244,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(8));","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":9077,"byte_end":9168,"line_start":245,"line_end":245,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(x.load(Ordering::SeqCst), 9);","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":9173,"byte_end":9217,"line_start":246,"line_end":246,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":9222,"byte_end":9229,"line_start":247,"line_end":247,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":9234,"byte_end":9243,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":10025,"byte_end":10034,"line_start":277,"line_end":277,"column_start":12,"column_end":21},"name":"fetch_and","qualname":"<Atomic<bool>>::fetch_and","value":"pub fn fetch_and(&Self, bool, Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Logical \"and\" with a boolean value.","sig":null,"attributes":[{"value":"/ Logical \"and\" with a boolean value.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":9774,"byte_end":9813,"line_start":270,"line_end":270,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":9818,"byte_end":9821,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ Performs a logical \"and\" operation on the current value and the argument","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":9826,"byte_end":9902,"line_start":272,"line_end":272,"column_start":5,"column_end":81}},{"value":"/ `val`, and sets the new value to the result.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":9907,"byte_end":9955,"line_start":273,"line_end":273,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":9960,"byte_end":9963,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ Returns the previous value.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":9968,"byte_end":9999,"line_start":275,"line_end":275,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":10004,"byte_end":10013,"line_start":276,"line_end":276,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":10401,"byte_end":10409,"line_start":288,"line_end":288,"column_start":12,"column_end":20},"name":"fetch_or","qualname":"<Atomic<bool>>::fetch_or","value":"pub fn fetch_or(&Self, bool, Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Logical \"or\" with a boolean value.","sig":null,"attributes":[{"value":"/ Logical \"or\" with a boolean value.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":10152,"byte_end":10190,"line_start":281,"line_end":281,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":10195,"byte_end":10198,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ Performs a logical \"or\" operation on the current value and the argument","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":10203,"byte_end":10278,"line_start":283,"line_end":283,"column_start":5,"column_end":80}},{"value":"/ `val`, and sets the new value to the result.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":10283,"byte_end":10331,"line_start":284,"line_end":284,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":10336,"byte_end":10339,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ Returns the previous value.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":10344,"byte_end":10375,"line_start":286,"line_end":286,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":10380,"byte_end":10389,"line_start":287,"line_end":287,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":10777,"byte_end":10786,"line_start":299,"line_end":299,"column_start":12,"column_end":21},"name":"fetch_xor","qualname":"<Atomic<bool>>::fetch_xor","value":"pub fn fetch_xor(&Self, bool, Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Logical \"xor\" with a boolean value.","sig":null,"attributes":[{"value":"/ Logical \"xor\" with a boolean value.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":10526,"byte_end":10565,"line_start":292,"line_end":292,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":10570,"byte_end":10573,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ Performs a logical \"xor\" operation on the current value and the argument","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":10578,"byte_end":10654,"line_start":294,"line_end":294,"column_start":5,"column_end":81}},{"value":"/ `val`, and sets the new value to the result.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":10659,"byte_end":10707,"line_start":295,"line_end":295,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":10712,"byte_end":10715,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ Returns the previous value.","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":10720,"byte_end":10751,"line_start":297,"line_end":297,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":10756,"byte_end":10765,"line_start":298,"line_end":298,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\fallback.rs","byte_start":27414,"byte_end":27422,"line_start":23,"line_end":23,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\fallback.rs","byte_start":29985,"byte_end":29994,"line_start":93,"line_end":93,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":2067,"byte_end":2073,"line_start":62,"line_end":62,"column_start":38,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":2540,"byte_end":2546,"line_start":73,"line_end":73,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":2682,"byte_end":2688,"line_start":80,"line_end":80,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":2877,"byte_end":2883,"line_start":88,"line_end":88,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":3436,"byte_end":3442,"line_start":108,"line_end":108,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":9755,"byte_end":9761,"line_start":269,"line_end":269,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\fallback.rs","byte_start":27414,"byte_end":27422,"line_start":23,"line_end":23,"column_start":6,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":46},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\fallback.rs","byte_start":29985,"byte_end":29994,"line_start":93,"line_end":93,"column_start":15,"column_end":24},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":57},"to":{"krate":1,"index":3115}},{"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":2067,"byte_end":2073,"line_start":62,"line_end":62,"column_start":38,"column_end":44},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":138},"to":{"krate":1,"index":2892}},{"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":2540,"byte_end":2546,"line_start":73,"line_end":73,"column_start":37,"column_end":43},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":138},"to":{"krate":1,"index":2858}},{"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":2682,"byte_end":2688,"line_start":80,"line_end":80,"column_start":43,"column_end":49},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":138},"to":{"krate":1,"index":8969}},{"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":2877,"byte_end":2883,"line_start":88,"line_end":88,"column_start":9,"column_end":15},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":138},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":3436,"byte_end":3442,"line_start":108,"line_end":108,"column_start":15,"column_end":21},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":138},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Qiao\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\atomic-0.5.1\\src\\lib.rs","byte_start":9755,"byte_end":9761,"line_start":269,"line_end":269,"column_start":6,"column_end":12},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":138},"to":{"krate":4294967295,"index":4294967295}}]}